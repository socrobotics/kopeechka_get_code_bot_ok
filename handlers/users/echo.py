from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from handlers.users.get_code import get_code_kopeechka
from keyboards.inline.menu import menu, menu_close, menu_again
from loader import dp

token = []
email = []


@dp.message_handler(Text(contains="–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"))
async def get_code(message: types.Message):
    code = get_code_kopeechka(email=email[0], token=token[0])
    if code == "–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É":
        await message.answer(f"–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É - {email[0]}",
                             reply_markup=types.ReplyKeyboardRemove())
        return
    if code == "–ùe —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ö–û–î —Å –ø–æ—á—Ç—ã":
        await message.answer(f"–ùe —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ö–û–î —Å –ø–æ—á—Ç—ã - {email[0]}, –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n\n"
                             f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–Ω–æ–≤–∞ —Å–≤–æ–π email",
                             reply_markup=types.ReplyKeyboardRemove())
        return
    if code is None:
        await message.answer(f"–£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π email",
                             reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(f"–í–∞—à –∫–æ–¥ - {code}",
                             reply_markup=menu_close)


@dp.message_handler(Text(contains="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"))
async def close_app(message: types.Message):
    await message.answer(f"{message.from_user.first_name} –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É\n"
                         f"–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!‚úã", reply_markup=types.ReplyKeyboardRemove())


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=None)
async def bot_echo(message: types.Message):
    text = message.text
    if "@" in text:
        email.clear()
        email.append(text)
        await message.reply(f'–°–ø–∞—Å–∏–±–æ —è –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π email - {text}\n\n'
                            f'–¢–µ–ø–µ—Ä—å:\n\n'
                            f'–û—Ç–∫—Ä–æ–π —Å–≤–æ–π Facebook –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É - <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥</> –∏–ª–∏ <b>Resend code</>\n\n'
                            f'üëá–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É - ‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=menu)
    if " " in text.strip():
        await message.reply(f'{message.from_user.first_name}, —è —Ç—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–º —á—Ç–æ–±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!\n'
                            f'–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ —á—Ç–æ —è –≥–æ–≤–æ—Ä—é! –°–ø–∞—Å–∏–±–æ üòÇ')

    if len(text) == 32:
        token.clear()
        token.append(text)
        await message.reply(f'–°–ø–∞—Å–∏–±–æ —è –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ç–æ–∫–µ–Ω - {text}\n\n'
                            f'–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π email')


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
@dp.message_handler(state="*", content_types=types.ContentTypes.ANY)
async def bot_echo_all(message: types.Message, state: FSMContext):
    state = await state.get_state()
    await message.answer(f"–≠—Ö–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <code>{state}</code>.\n"
                         f"\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                         f"<code>{message}</code>")
